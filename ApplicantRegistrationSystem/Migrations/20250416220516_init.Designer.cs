// <auto-generated />
using System;
using ApplicantRegistrationSystem.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApplicantRegistrationSystem.Migrations
{
    [DbContext(typeof(AbiturientContext))]
    [Migration("20250416220516_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicantRegistrationSystem.DAL.Models.Abiturient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EducationalInstitutionCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EducationalInstitutionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EducationalInstitutionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("GraduationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasMedal")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasRedDiploma")
                        .HasColumnType("boolean");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Abiturients", (string)null);
                });

            modelBuilder.Entity("ApplicantRegistrationSystem.DAL.Models.AbiturientSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AbiturientId")
                        .HasColumnType("integer");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AbiturientId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AbiturientSubject");
                });

            modelBuilder.Entity("ApplicantRegistrationSystem.DAL.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Specialities", (string)null);
                });

            modelBuilder.Entity("ApplicantRegistrationSystem.DAL.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("ApplicantRegistrationSystem.DAL.Models.Abiturient", b =>
                {
                    b.HasOne("ApplicantRegistrationSystem.DAL.Models.Speciality", "Speciality")
                        .WithMany("Abiturients")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("ApplicantRegistrationSystem.DAL.Models.AbiturientSubject", b =>
                {
                    b.HasOne("ApplicantRegistrationSystem.DAL.Models.Abiturient", "Abiturient")
                        .WithMany("AbiturientSubjects")
                        .HasForeignKey("AbiturientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicantRegistrationSystem.DAL.Models.Subject", "Subject")
                        .WithMany("AbiturientSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abiturient");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ApplicantRegistrationSystem.DAL.Models.Abiturient", b =>
                {
                    b.Navigation("AbiturientSubjects");
                });

            modelBuilder.Entity("ApplicantRegistrationSystem.DAL.Models.Speciality", b =>
                {
                    b.Navigation("Abiturients");
                });

            modelBuilder.Entity("ApplicantRegistrationSystem.DAL.Models.Subject", b =>
                {
                    b.Navigation("AbiturientSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
